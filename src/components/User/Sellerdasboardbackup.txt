import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './seller.css';

function SellerDashboard() {
    const [formData, setFormData] = useState({
        name: '',
        price: '',
        description: '',
        image: null
    });
    const [responseMessage, setResponseMessage] = useState('');
    const [products, setProducts] = useState([]); // State to store fetched products
    
    // Fetch products on component mount
    useEffect(() => {
        fetchProducts();
    }, []);
    
    const fetchProducts = async () => {
        try {
            const token = localStorage.getItem('token');
            const response = await axios.get('http://localhost:5000/api/products', {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            setProducts(response.data);
        } catch (error) {
            console.error('Error fetching products:', error);
        }
    };
    
    // Handle form data changes
    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prevData => ({ ...prevData, [name]: value }));
    };
    
    // Handle file input change
    const handleFileChange = (e) => {
        const file = e.target.files[0];
        if (file && file.type.startsWith('image/')) {
            setFormData(prevData => ({ ...prevData, image: file }));
        } else {
            setResponseMessage('Please select a valid image file.');
        }
    };
    
    // Handle form submission
    const handleSubmit = async (e) => {
        e.preventDefault();
        const data = new FormData();
        data.append('name', formData.name);
        data.append('price', formData.price);
        data.append('description', formData.description);
        if (formData.image) data.append('image', formData.image);
        
        try {
            const token = localStorage.getItem('token');
            const response = await axios.post('http://localhost:5000/api/products/upload', data, {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'multipart/form-data'
                }
            });
            setResponseMessage(response.data.message);
            setFormData({ name: '', price: '', description: '', image: null });
            fetchProducts(); // Refresh the product list
        } catch (error) {
            setResponseMessage(error.response?.data?.message || 'Error uploading product');
            console.error('Upload error:', error);
        }
    };

    // Handle delete product
    const deleteProduct = async (productId) => {
        try {
            const token = localStorage.getItem('token');
            await axios.delete(`http://localhost:5000/api/products/${productId}`, {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            setResponseMessage('Product deleted successfully');
            fetchProducts(); // Refresh the product list
        } catch (error) {
            console.error('Error deleting product:', error);
            setResponseMessage('Error deleting product');
        }
    };

    return (
        <div className="seller-dashboard">
            <h1>Seller Dashboard</h1>
            
            {/* Product Upload Form */}
            <form onSubmit={handleSubmit} className="upload-form">
                <div className="form-group">
                    <label htmlFor="name">Product Name:</label>
                    <input
                        type="text"
                        id="name"
                        name="name"
                        value={formData.name}
                        onChange={handleChange}
                        required
                    />
                </div>
                
                <div className="form-group">
                    <label htmlFor="price">Price:</label>
                    <input
                        type="number"
                        id="price"
                        name="price"
                        value={formData.price}
                        onChange={handleChange}
                        required
                    />
                </div>
                
                <div className="form-group">
                    <label htmlFor="description">Description:</label>
                    <textarea
                        id="description"
                        name="description"
                        value={formData.description}
                        onChange={handleChange}
                        required
                    />
                </div>
                
                <div className="form-group">
                    <label htmlFor="image">Product Image:</label>
                    <input
                        type="file"
                        id="image"
                        name="image"
                        onChange={handleFileChange}
                        accept="image/*"
                        required
                    />
                </div>
                
                <button type="submit">Upload Product</button>
            </form>
            
            {/* Response message */}
            {responseMessage && (
                <div className={`message ${responseMessage.includes('Error') ? 'error' : 'success'}`}>
                    {responseMessage}
                </div>
            )}

            {/* Display Products */}
            <div className="product-list">
                <h2>My Products</h2>
                {products.map((product) => (
                    <div key={product._id} className="product-item">
                        <img src={`http://localhost:5000/${product.image}`} alt={product.name} className="product-image" />
                        <h3>{product.name}</h3>
                        <p>Price: ${product.price}</p>
                        <p>Description: {product.description}</p>
                        <p>Status: {product.approvalStatus}</p>

                        {/* Conditional buttons based on approval status */}
                        {product.approvalStatus === 'approved' ? (
                            <button onClick={() => deleteProduct(product._id)}>Mark as Sold</button>
                        ) : (
                            <button onClick={() => deleteProduct(product._id)}>Delete</button>
                        )}
                    </div>
                ))}
            </div>
        </div>
    );
}

export default SellerDashboard;
///////
import React from 'react';
import { Routes, Route } from 'react-router-dom';
import Home from './pages/Home';
import Login from './components/Auth/Login';
import Register from './components/Auth/Register';
import SellerDashboard from './components/User/SellerDashboard';
import AdminPanel from './components/Admin/AdminPanel';
import ProtectedRoute from './components/ProtectedRoute';

function App() {
  return (
    <div className="App">
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/login" element={<Login />} />
        <Route path="/register" element={<Register />} />
        
        {/* Use ProtectedRoute for Seller Dashboard */}
        <Route path="/seller-dashboard" element={
          <ProtectedRoute>
            <SellerDashboard />
          </ProtectedRoute>
        } />

        {/* Use ProtectedRoute for Admin Panel and Product Approval */}
        <Route path="/admin" element={
          <ProtectedRoute isAdmin>
            <AdminPanel />
          </ProtectedRoute>
        } />

       
      </Routes>
    </div>
  );
}

export default App;
///
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import './AdminPanel.css';

const AdminPanel = () => {
  const [products, setProducts] = useState([]);
  const [approvedProducts, setApprovedProducts] = useState([]);
  const [users, setUsers] = useState([]);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(true);
  const [currentPage, setCurrentPage] = useState(1);
  const [usersPerPage] = useState(10);
  const navigate = useNavigate();

  // Fetch pending and approved products and users
  useEffect(() => {
    const fetchData = async () => {
      try {
        const productResponse = await fetch('http://localhost:5000/api/admin/products/pending', {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('token')}`,
          },
        });
        const approvedProductResponse = await fetch('http://localhost:5000/api/admin/products/approved', {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('token')}`,
          },
        });
        const userResponse = await fetch('http://localhost:5000/api/admin/users', {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('token')}`,
          },
        });

        const productData = await productResponse.json();
        const approvedProductData = await approvedProductResponse.json();
        const userData = await userResponse.json();

        setProducts(productData);
        setApprovedProducts(approvedProductData);
        setUsers(userData);
      } catch (err) {
        setError('Failed to fetch data. Please try again later.');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  // Product Approval Functions
  const handleApprove = async (productId) => {
    try {
      await fetch(`http://localhost:5000/api/admin/products/${productId}`, {
        method: 'PUT',
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ approvalStatus: 'approved' }),
      });
      setProducts(products.filter((product) => product._id !== productId));
    } catch (err) {
      setError('Failed to approve product. Please try again.');
    }
  };

  const handleReject = async (productId) => {
    try {
      // Revert the product status to rejected
      await fetch(`http://localhost:5000/api/admin/products/${productId}`, {
        method: 'PUT',
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ approvalStatus: 'rejected' }),
      });
      // Remove it from the approved products state
      setApprovedProducts(approvedProducts.filter((product) => product._id !== productId));
    } catch (err) {
      setError('Failed to reject product. Please try again.');
    }
  };

  // User Management Functions
  const handleGrantAdmin = async (userId) => {
    try {
      await fetch(`http://localhost:5000/api/admin/users/${userId}/grant-admin`, {
        method: 'PUT',
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json',
        },
      });
      setUsers(users.map(user => 
        user._id === userId ? { ...user, role: 'admin' } : user
      ));
    } catch (err) {
      setError('Failed to grant admin role. Please try again.');
    }
  };

  const handleBanUser = async (userId) => {
    try {
      await fetch(`http://localhost:5000/api/admin/users/${userId}/ban`, {
        method: 'PUT',
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json',
        },
      });
      setUsers(users.filter(user => user._id !== userId));
    } catch (err) {
      setError('Failed to ban user. Please try again.');
    }
  };

  const handleRemoveUser = async (userId) => {
    try {
      await fetch(`http://localhost:5000/api/admin/users/${userId}`, {
        method: 'DELETE',
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`,
        },
      });
      setUsers(users.filter(user => user._id !== userId));
    } catch (err) {
      setError('Failed to remove user. Please try again.');
    }
  };

  // Pagination logic
  const indexOfLastUser = currentPage * usersPerPage;
  const indexOfFirstUser = indexOfLastUser - usersPerPage;
  const currentUsers = users.slice(indexOfFirstUser, indexOfLastUser);

  const paginate = (pageNumber) => setCurrentPage(pageNumber);

  if (loading) {
    return (
      <div className="loading-container">
        <div className="loader"></div>
      </div>
    );
  }

  return (
    <div className="admin-container">
      <div className="admin-header">
        <h1>Admin Dashboard</h1>
        <p>Manage Products and Users</p>
      </div>

      {error && (
        <div className="error-message">
          {error}
        </div>
      )}

      {/* Product Approval Section */}
      <div className="product-approval">
        <h2>Pending Product Approvals</h2>

        {products.length === 0 ? (
          <div className="empty-state">
            <p>No products pending approval</p>
          </div>
        ) : (
          <div className="products-grid">
            {products.map((product) => (
              <div key={product._id} className="product-card">
                <div className="product-image">
                  <img
                    src={`http://localhost:5000/${product.image}`}
                    alt={product.name}
                  />
                </div>
                <div className="product-details">
                  <h3>{product.name}</h3>
                  <p className="price">
                    ${product.price.toLocaleString(undefined, {
                      minimumFractionDigits: 2,
                      maximumFractionDigits: 2,
                    })}
                  </p>
                  <p className="description">{product.description}</p>
                </div>
                <div className="product-actions">
                  <button 
                    onClick={() => handleApprove(product._id)}
                    className="approve-btn"
                  >
                    Approve
                  </button>
                  <button 
                    onClick={() => handleReject(product._id)}
                    className="reject-btn"
                  >
                    Reject
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Approved Products Section */}
      <div className="approved-products">
        <h2>Approved Products</h2>

        {approvedProducts.length === 0 ? (
          <div className="empty-state">
            <p>No approved products available</p>
          </div>
        ) : (
          <div className="products-grid">
            {approvedProducts.map((product) => (
              <div key={product._id} className="product-card">
                <div className="product-image">
                  <img
                    src={`http://localhost:5000/${product.image}`}
                    alt={product.name}
                  />
                </div>
                <div className="product-details">
                  <h3>{product.name}</h3>
                  <p className="price">
                    ${product.price.toLocaleString(undefined, {
                      minimumFractionDigits: 2,
                      maximumFractionDigits: 2,
                    })}
                  </p>
                  <p className="description">{product.description}</p>
                </div>
                <div className="product-actions">
                  <button 
                    onClick={() => handleReject(product._id)}
                    className="reject-btn"
                  >
                    Reject
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* User Management Section */}
      <div className="user-management">
        <h2>Manage Users</h2>

        {currentUsers.length === 0 ? (
          <div className="empty-state">
            <p>No users to manage</p>
          </div>
        ) : (
          <div className="users-grid">
            {currentUsers.map((user) => (
              <div key={user._id} className="user-card">
                <div className="user-details">
                  <h3>{user.username}</h3>
                  <p>Email: {user.email}</p>
                  <p>Role: {user.role}</p>
                </div>
                <div className="user-actions">
                  {user.role !== 'admin' && (
                    <button 
                      onClick={() => handleGrantAdmin(user._id)} 
                      className="grant-admin-btn"
                    >
                      Grant Admin
                    </button>
                  )}
                  <button 
                    onClick={() => handleBanUser(user._id)} 
                    className="ban-btn"
                  >
                    Ban
                  </button>
                  <button 
                    onClick={() => handleRemoveUser(user._id)} 
                    className="remove-btn"
                  >
                    Remove
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Pagination */}
        <div className="pagination">
          {Array.from({ length: Math.ceil(users.length / usersPerPage) }, (_, index) => (
            <button 
              key={index} 
              onClick={() => paginate(index + 1)} 
              className={currentPage === index + 1 ? 'active' : ''}
            >
              {index + 1}
            </button>
          ))}
        </div>
      </div>
    </div>
  );
};

export default AdminPanel;
//
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import './AdminPanel.css';

const AdminPanel = () => {
  const [products, setProducts] = useState([]);
  const [approvedProducts, setApprovedProducts] = useState([]);
  const [users, setUsers] = useState([]);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(true);
  const [currentPage, setCurrentPage] = useState(1);
  const [usersPerPage] = useState(10);
  const navigate = useNavigate();

  // Fetch pending and approved products and users
  useEffect(() => {
    const fetchData = async () => {
      try {
        const productResponse = await fetch('http://localhost:5000/api/admin/products/pending', {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('token')}`,
          },
        });
        const approvedProductResponse = await fetch('http://localhost:5000/api/admin/products/approved', {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('token')}`,
          },
        });
        const userResponse = await fetch('http://localhost:5000/api/admin/users', {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('token')}`,
          },
        });

        const productData = await productResponse.json();
        const approvedProductData = await approvedProductResponse.json();
        const userData = await userResponse.json();

        setProducts(productData);
        setApprovedProducts(approvedProductData);
        setUsers(userData);
      } catch (err) {
        setError('Failed to fetch data. Please try again later.');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  // Product Approval Functions
  const handleApprove = async (productId) => {
    try {
      await fetch(`http://localhost:5000/api/admin/products/${productId}`, {
        method: 'PUT',
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ approvalStatus: 'approved' }),
      });
      setProducts(products.filter((product) => product._id !== productId));
    } catch (err) {
      setError('Failed to approve product. Please try again.');
    }
  };

  const handleReject = async (productId) => {
    try {
      // Revert the product status to rejected
      await fetch(`http://localhost:5000/api/admin/products/${productId}`, {
        method: 'PUT',
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ approvalStatus: 'rejected' }),
      });
      // Remove it from the approved products state
      setApprovedProducts(approvedProducts.filter((product) => product._id !== productId));
    } catch (err) {
      setError('Failed to reject product. Please try again.');
    }
  };

  // User Management Functions
  const handleGrantAdmin = async (userId) => {
    try {
      await fetch(`http://localhost:5000/api/admin/users/${userId}/grant-admin`, {
        method: 'PUT',
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json',
        },
      });
      setUsers(users.map(user => 
        user._id === userId ? { ...user, role: 'admin' } : user
      ));
    } catch (err) {
      setError('Failed to grant admin role. Please try again.');
    }
  };

  const handleBanUser = async (userId) => {
    try {
      await fetch(`http://localhost:5000/api/admin/users/${userId}/ban`, {
        method: 'PUT',
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json',
        },
      });
      setUsers(users.filter(user => user._id !== userId));
    } catch (err) {
      setError('Failed to ban user. Please try again.');
    }
  };

  const handleRemoveUser = async (userId) => {
    try {
      await fetch(`http://localhost:5000/api/admin/users/${userId}`, {
        method: 'DELETE',
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`,
        },
      });
      setUsers(users.filter(user => user._id !== userId));
    } catch (err) {
      setError('Failed to remove user. Please try again.');
    }
  };

  // Pagination logic
  const indexOfLastUser = currentPage * usersPerPage;
  const indexOfFirstUser = indexOfLastUser - usersPerPage;
  const currentUsers = users.slice(indexOfFirstUser, indexOfLastUser);

  const paginate = (pageNumber) => setCurrentPage(pageNumber);

  if (loading) {
    return (
      <div className="loading-container">
        <div className="loader"></div>
      </div>
    );
  }

  return (
    <div className="admin-container">
      <div className="admin-header">
        <h1>Admin Dashboard</h1>
        <p>Manage Products and Users</p>
      </div>

      {error && (
        <div className="error-message">
          {error}
        </div>
      )}

      {/* Summary Information */}
      <div className="summary-container">
        <div className="summary-item">
          <h3>Total Users</h3>
          <p>{users.length}</p>
        </div>
        <div className="summary-item">
          <h3>Pending Products</h3>
          <p>{products.length}</p>
        </div>
        <div className="summary-item">
          <h3>Approved Products</h3>
          <p>{approvedProducts.length}</p>
        </div>
      </div>

      {/* Product Approval Section */}
      <div className="product-approval">
        <h2>Pending Product Approvals</h2>

        {products.length === 0 ? (
          <div className="empty-state">
            <p>No products pending approval</p>
          </div>
        ) : (
          <div className="products-grid">
            {products.map((product) => (
              <div key={product._id} className="product-card">
                <div className="product-image">
                  <img
                    src={`http://localhost:5000/${product.image}`}
                    alt={product.name}
                  />
                </div>
                <div className="product-details">
                  <h3>{product.name}</h3>
                  <p className="price">
                    ${product.price.toLocaleString(undefined, {
                      minimumFractionDigits: 2,
                      maximumFractionDigits: 2,
                    })}
                  </p>
                  <p className="description">{product.description}</p>
                </div>
                <div className="product-actions">
                  <button 
                    onClick={() => handleApprove(product._id)}
                    className="approve-btn"
                  >
                    Approve
                  </button>
                  <button 
                    onClick={() => handleReject(product._id)}
                    className="reject-btn"
                  >
                    Reject
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Approved Products Section */}
      <div className="approved-products">
        <h2>Approved Products</h2>

        {approvedProducts.length === 0 ? (
          <div className="empty-state">
            <p>No approved products available</p>
          </div>
        ) : (
          <div className="products-grid">
            {approvedProducts.map((product) => (
              <div key={product._id} className="product-card">
                <div className="product-image">
                  <img
                    src={`http://localhost:5000/${product.image}`}
                    alt={product.name}
                  />
                </div>
                <div className="product-details">
                  <h3>{product.name}</h3>
                  <p className="price">
                    ${product.price.toLocaleString(undefined, {
                      minimumFractionDigits: 2,
                      maximumFractionDigits: 2,
                    })}
                  </p>
                  <p className="description">{product.description}</p>
                </div>
                <div className="product-actions">
                  <button 
                    onClick={() => handleReject(product._id)}
                    className="reject-btn"
                  >
                    Reject
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* User Management Section */}
      <div className="user-management">
        <h2>Manage Users</h2>

        {currentUsers.length === 0 ? (
          <div className="empty-state">
            <p>No users to manage</p>
          </div>
        ) : (
          <div className="users-grid">
            {currentUsers.map((user) => (
              <div key={user._id} className="user-card">
                <div className="user-details">
                  <h3>{user.username}</h3>
                  <p>Email: {user.email}</p>
                  <p>Role: {user.role}</p>
                </div>
                <div className="user-actions">
                  {user.role !== 'admin' && (
                    <button 
                      onClick={() => handleGrantAdmin(user._id)} 
                      className="grant-admin-btn"
                    >
                      Grant Admin
                    </button>
                  )}
                  <button 
                    onClick={() => handleBanUser(user._id)} 
                    className="ban-btn"
                  >
                    Ban
                  </button>
                  <button 
                    onClick={() => handleRemoveUser(user._id)} 
                    className="remove-btn"
                  >
                    Remove
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Pagination */}
        <div className="pagination">
          {Array.from({ length: Math.ceil(users.length / usersPerPage) }, (_, index) => (
            <button 
              key={index} 
              onClick={() => paginate(index + 1)} 
              className={currentPage === index + 1 ? 'active' : ''}
            >
              {index + 1}
            </button>
          ))}
        </div>
      </div>
    </div>
  );
};

export default AdminPanel;

<p className="whatsapp-number">
              WhatsApp: {product.sellerWhatsApp}
            </p>